// <auto-generated />
using System;
using AWSServerlessFeedbackDiscipline.ContextBazaDeDate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWSServerlessFeedbackDiscipline.Migratii
{
    [DbContext(typeof(FeedbackDisciplineContext))]
    partial class FeedbackDisciplineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AWSServerlessFeedbackDiscipline.Modele.AniDeStudiu", b =>
                {
                    b.Property<int>("id_ani_de_studiu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("anul_de_studiu")
                        .HasColumnType("longtext");

                    b.Property<int>("ciclul_de_studii")
                        .HasColumnType("int");

                    b.HasKey("id_ani_de_studiu");

                    b.ToTable("AniDeStudiu");
                });

            modelBuilder.Entity("AWSServerlessFeedbackDiscipline.Modele.Chestionare", b =>
                {
                    b.Property<int>("id_chestionar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("id_an_de_studiu")
                        .HasColumnType("int");

                    b.Property<int>("id_disciplina")
                        .HasColumnType("int");

                    b.Property<int>("id_program_de_studiu")
                        .HasColumnType("int");

                    b.Property<int>("id_student")
                        .HasColumnType("int");

                    b.Property<int>("id_tip_activitate")
                        .HasColumnType("int");

                    b.Property<int>("numar_activitate")
                        .HasColumnType("int");

                    b.HasKey("id_chestionar");

                    b.ToTable("Chestionare");
                });

            modelBuilder.Entity("AWSServerlessFeedbackDiscipline.Modele.CiclulDeStudii", b =>
                {
                    b.Property<int>("id_ciclu_de_studii")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nume_ciclu_de_studii")
                        .HasColumnType("longtext");

                    b.HasKey("id_ciclu_de_studii");

                    b.ToTable("CiclulDeStudii");
                });

            modelBuilder.Entity("AWSServerlessFeedbackDiscipline.Modele.Discipline", b =>
                {
                    b.Property<int>("id_disciplina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("anul_de_studiu")
                        .HasColumnType("int");

                    b.Property<int>("ciclul_de_studii")
                        .HasColumnType("int");

                    b.Property<int>("nr_cursuri")
                        .HasColumnType("int");

                    b.Property<int>("nr_intalniri_proiect")
                        .HasColumnType("int");

                    b.Property<int>("nr_laboratoare")
                        .HasColumnType("int");

                    b.Property<int>("nr_seminare")
                        .HasColumnType("int");

                    b.Property<string>("nume_disciplina")
                        .HasColumnType("longtext");

                    b.Property<int>("program_de_studii")
                        .HasColumnType("int");

                    b.Property<int>("semestrul")
                        .HasColumnType("int");

                    b.HasKey("id_disciplina");

                    b.ToTable("Discipline");
                });

            modelBuilder.Entity("AWSServerlessFeedbackDiscipline.Modele.ProgrameStudiu", b =>
                {
                    b.Property<int>("id_programe_de_studiu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("id_ciclul_de_studii")
                        .HasColumnType("int");

                    b.Property<string>("nume_programe_de_studiu")
                        .HasColumnType("longtext");

                    b.HasKey("id_programe_de_studiu");

                    b.ToTable("ProgrameDeStudiu");
                });

            modelBuilder.Entity("AWSServerlessFeedbackDiscipline.Modele.TipuriActivitati", b =>
                {
                    b.Property<int>("id_tip_activitate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nume_activitate")
                        .HasColumnType("longtext");

                    b.HasKey("id_tip_activitate");

                    b.ToTable("TipuriActivitati");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_rol");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("stampila_concurenta_date");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("nume_rol");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("nume_rol_majuscule");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roluri", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_atribut_rol");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("tip_atribut");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("valoare_atribut");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_rol");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AtributeRoluri", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_utilizator");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("numar_accesari_cont_esuate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("stampila_concurenta_date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("confirmare_email");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("blocare_utilizator");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_expirare_utilizator_blocat");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email_majuscule");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("nume_utilizator_majuscule");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("hash_parola");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("numar_telefon");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("confirmare_numar_telefon");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("stampila_de_securitate");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("autentificare_doi_factori");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("nume_utilizator");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Utilizatori", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_atribute_utilizator");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("tip_atribut");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("valoare_atribut");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_utilizator");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AtributeUtilizatori", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("furnizor_logare");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cheie_furnizor");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("nume_furnizor");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_utilizator");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("LogareUtilizator", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_utilizator");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_rol");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoluriUtilizatori", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_utilizator");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("furnizor_logare");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nume");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("valoare");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("TokenUtilizatori", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
